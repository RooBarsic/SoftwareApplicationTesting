####################
1. Понятие тестирования ПО. Основные определения.

####################
2. Цели тестирования. Классификация тестов.
Увеличить доверие пользователя, что прога корректно функционирует.
Модульное, Интеграционное, Системное, Приёмочное - тестирование.

Валидация - проверка на соответствие ожиданиям
    ПО выполянет требования пользователя
    Пирожок - мясной, веганский, сладкий

Верификация - внутреенее управление качеством
    ПО - выполянет требования спецификации ?
    Пирожок - ( размер, степень прожарки, начинка ...)

####################
3. Модульное тестирование. Понятие модуля.

####################
4. V-образная модель. Статическое и динамическое тестирование.
V-модель – это улучшенная версия классической каскадной модели. 
Здесь на каждом этапе происходит контроль текущего процесса, для того чтобы 
убедится в возможности перехода на следующий уровень. В этой модели тестирование 
начинается еще со стадии написания требований, причем для каждого последующего 
этапа предусмотрен свой уровень тестового покрытия.
Для каждого уровня тестирования разрабатывается отдельный тест-план, то есть во 
время тестирования текущего уровня, мы также занимаемся разработкой стратегии 
тестирования следующего. Создавая тест-планы, мы также определяем ожидаемые результаты 
тестирования и указываем критерии входа и выхода для каждого этапа.
В V-модели каждому этапу проектирования и разработки системы соответствует отдельный 
уровень тестирования. Здесь процесс разработки представлен нисходящей последовательностью 
в левой части условной буквы V, а стадии тестирования – на ее правом ребре. 
Соответствие этапов разработки и тестирования показано горизонтальными линиями.
Плюсы и минусы V-модели:
+ строгая этапизация;
+ планирование тестирования и верификация системы производятся на ранних этапах;
+ улучшенный, по сравнению с каскадной моделью, тайм-менеджмент;
+ промежуточное тестирование.
— недостаточная гибкость модели;
— собственно создание программы происходит на этапе написания кода, то есть уже в середине процесса разработки;
— недостаточный анализ рисков;
— нет работы с параллельными событиями и возможности динамического внесения изменений.
Когда использовать V-модель:
– В проектах, в которых существуют временные и финансовые ограничения;
– Для задач, которые предполагают более широкое, по сравнению с каскадной моделью, тестовое покрытие.


--1. Статическое тестирование – тип тестирования, который предполагает, что программный 
код во время тестирования не будет выполняться. При этом само тестирование может быть как ручным, так и автоматизированным.

--2. Динамическое тестирование – тип тестирования, который предполагает запуск программного 
кода. Таким образом, анализируется поведение программы во время ее работы.

####################
5. Валидация и верификация. Тестирование методом "чёрного" и "белого" ящика.
####################
6. Тестовый случай, тестовый сценарий и тестовое покрытие.
####################
7. Анализ эквивалентности.
####################
8. Таблицы решений и таблицы переходов.
-- Таблицы решений - используется в системах со сложной логикой, описание конечного автомата
   Может включать большой набор условий ( обычно true и false) и действий
-- Таблицы переходов - позволяют выбрать состояния и их комбинации которые можно опустить
     Покрыты определённые строки тестами


####################
9. Регрессионное тестирование.
Регрессионное тестирование – это набор тестов, направленных на обнаружение дефектов в уже 
протестированных участках приложения. Делается это совсем не для того, чтобы окончательно 
убедиться в отсутствии багов, а для поиска и исправления регрессионных ошибок. 
Регрессионные ошибки – те же баги, но появляются они не при написании программы, а при 
добавлении в существующий билд нового участка программы или исправлении других багов, что 
и стало причиной возникновения новых дефектов в уже протестированном продукте.

Таким образом, мы можем сказать, что цель регрессионного тестирования – убедиться, что 
исправление одних багов не стало причиной возникновения других и что обновление билда 
не создало новых дефектов в уже проверенном коде

####################
10. Библиотека JUnit. Особенности API. Класс junit.framework.Assert.
####################
11. Отличия JUnit 3 от JUnit 4.














